{
  "info": {
    "title": "Swagger Petstore - OpenAPI 3.0",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
      "name": "Apache 2.0"
    },
    "version": "1.0.11",
    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService": "http://swagger.io/terms/"
  },
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "url": "http://swagger.io",
        "description": "Find out more"
      }
    },
    {
      "name": "store",
      "description": "Access to Petstore orders",
      "externalDocs": {
        "url": "http://swagger.io",
        "description": "Find out more about our store"
      }
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/swagger-petstore-openapi-30/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "responses": {
          "default": {
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Created user object"
        }
      }
    },
    "/swagger-petstore-openapi-30/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "X-Rate-Limit": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "date in UTC when token expires"
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The user name for login"
          },
          {
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The password for login in clear text"
          }
        ],
        "description": "",
        "operationId": "loginUser"
      }
    },
    "/swagger-petstore-openapi-30/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of pet to return"
          }
        ],
        "description": "Returns a single pet",
        "operationId": "getPetById"
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "responses": {
          "400": {
            "description": "Invalid input"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of pet that needs to be updated"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Name of pet that needs to be updated"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Status of pet that needs to be updated"
          }
        ],
        "description": "",
        "operationId": "updatePetWithForm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Qap-Swagger-petstore-openapi-30pet"
              }
            }
          },
          "required": true,
          "description": "Create a new Swagger-petstore-openapi-30pet in the store"
        }
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": ""
          },
          {
            "in": "path",
            "name": "petId",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "Pet id to delete"
          }
        ],
        "description": "delete a pet",
        "operationId": "deletePet"
      }
    },
    "/swagger-petstore-openapi-30/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid input"
          },
          "422": {
            "description": "Validation exception"
          }
        },
        "parameters": [],
        "description": "Place a new order in the store",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        }
      }
    },
    "/swagger-petstore-openapi-30/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [],
        "description": "",
        "operationId": "logoutUser"
      }
    },
    "/swagger-petstore-openapi-30/pet/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "explode": true,
            "required": false,
            "description": "Tags to filter by"
          }
        ],
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags"
      }
    },
    "/swagger-petstore-openapi-30/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventories by status",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory"
      }
    },
    "/swagger-petstore-openapi-30/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The name that needs to be fetched. Use user1 for testing. "
          }
        ],
        "description": "",
        "operationId": "getUserByName"
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "name that need to be deleted"
          }
        ],
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Update an existent user in the store"
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The name that needs to be deleted"
          }
        ],
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser"
      }
    },
    "/swagger-petstore-openapi-30/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Successful operation"
          },
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [],
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/swagger-petstore-openapi-30/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of order that needs to be fetched"
          }
        ],
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
        "operationId": "getOrderById"
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of the order that needs to be deleted"
          }
        ],
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder"
      }
    },
    "/swagger-petstore-openapi-30/pet/{petId}/uploadImage": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "uploads an image",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of pet to update"
          },
          {
            "in": "query",
            "name": "additionalMetadata",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Additional Metadata"
          }
        ],
        "description": "",
        "operationId": "uploadFile",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "openapi": "3.0.3",
  "servers": [
    {
      "url": "/",
      "description": "Main (production) server"
    },
    {
      "url": "/",
      "description": "Internal test server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "schemas": {
      "Pet": {
        "xml": {
          "name": "pet"
        },
        "type": "object",
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "tags": {
            "xml": {
              "wrapped": true
            },
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "enum": [
              "available",
              "pending",
              "sold"
            ],
            "type": "string",
            "description": "pet status in the store"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "photoUrls": {
            "xml": {
              "wrapped": true
            },
            "type": "array",
            "items": {
              "xml": {
                "name": "photoUrl"
              },
              "type": "string"
            }
          }
        }
      },
      "Tag": {
        "xml": {
          "name": "tag"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "User": {
        "xml": {
          "name": "user"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "example": 1,
            "description": "User Status"
          }
        }
      },
      "Order": {
        "xml": {
          "name": "order"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "status": {
            "enum": [
              "placed",
              "approved",
              "delivered"
            ],
            "type": "string",
            "example": "approved",
            "description": "Order Status"
          },
          "complete": {
            "type": "boolean"
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 7
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Address": {
        "xml": {
          "name": "address"
        },
        "type": "object",
        "properties": {
          "zip": {
            "type": "string",
            "example": "94301"
          },
          "city": {
            "type": "string",
            "example": "Palo Alto"
          },
          "state": {
            "type": "string",
            "example": "CA"
          },
          "street": {
            "type": "string",
            "example": "437 Lytton"
          }
        }
      },
      "Category": {
        "xml": {
          "name": "category"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Dogs"
          }
        }
      },
      "Customer": {
        "xml": {
          "name": "customer"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "address": {
            "xml": {
              "name": "addresses",
              "wrapped": true
            },
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "username": {
            "type": "string",
            "example": "fehguy"
          }
        }
      },
      "ApiResponse": {
        "xml": {
          "name": "##default"
        },
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Qap-Swagger-petstore-openapi-30pet": {
        "type": "object",
        "properties": {}
      }
    },
    "requestBodies": {
      "Pet": {
        "content": {
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        },
        "description": "Pet object that needs to be added to the store"
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "description": "List of user object"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}